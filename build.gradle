/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

version '1.12.2'+System.getProperty('release','-SNAPSHOT')

repositories {
	mavenLocal()
	mavenCentral()
    maven {
        url "http://jars.interlis.ch"
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'US-ASCII'

// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
    // check for updates every build
    // resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

dependencies {
    implementation group: 'ch.ehi', name: 'ehibasics', version: '1.4.1'
    implementation group: 'ch.interlis', name: 'iox-api', version: '1.0.4'
    implementation group: 'ch.interlis', name: 'iox-ili', version: '1.21.13'
    implementation group: 'ch.interlis', name: 'ili2c-tool', version: "5.3.0"
    implementation group: 'ch.interlis', name: 'ili2c-core', version: "5.3.0"

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation group: 'ch.interlis', name: 'ilivalidator', version: "1.12.1"
}

// Define the main class for the application
mainClassName = 'ch.ehi.ilimanager.Main'

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))
def downloads_pwd = System.getProperty('downloads_pwd',properties.get('downloads_pwd','downloads_pwd'))
def downloads_usr = System.getProperty('downloads_usr',properties.get('downloads_usr','downloads_usr'))
def python= System.getProperty('python',properties.get('python','python'))
def rst2html= System.getProperty('rst2html',properties.get('rst2html','rst2html'))

def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sourceSets {
    main {
    	output.dir(generatedResources, builtBy: 'generateMyResources')
    }
}

task generateMyResources {
	def versionPropsFile = new File(generatedResources,"ch/ehi/ilimanager/Version.properties")
	def version="$project.version"
	def hash=getGitHash()
	inputs.property("version","$project.version")
	inputs.property("hash",getGitHash())
	outputs.file versionPropsFile
	doLast {
		def versionProps = new Properties()
		versionProps.setProperty('version', version)
		versionProps.setProperty('versionCommit', hash)
		versionPropsFile.getParentFile().mkdirs();
		versionProps.store(versionPropsFile.newWriter(), null);
	}
}
