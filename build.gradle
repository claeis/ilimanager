plugins {
    id 'java'
    id 'maven'

}

version '0.9.2'+System.getProperty('release','-SNAPSHOT')
group 'ch.ehi'

configurations {
    deployerJars
    ftpAntTask
}

repositories {
	mavenLocal()
	mavenCentral()
    maven {
        url "http://jars.interlis.ch"
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'US-ASCII'

// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
    // check for updates every build
    // resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

dependencies {
    implementation group: 'ch.ehi', name: 'ehibasics', version: '1.4.1'
    implementation group: 'ch.interlis', name: 'iox-api', version: '1.0.4'
    implementation group: 'ch.interlis', name: 'iox-ili', version: '1.21.13'
    implementation group: 'ch.interlis', name: 'ili2c-tool', version: "5.3.0"
    implementation group: 'ch.interlis', name: 'ili2c-core', version: "5.3.0"

    testImplementation 'junit:junit:4.12'
    testImplementation group: 'ch.interlis', name: 'ilivalidator', version: "1.12.1"
    
    deployerJars "org.apache.maven.wagon:wagon-ftp:3.3.3"
    deployerJars "org.apache.maven.wagon:wagon-ssh:3.3.3"
    
    ftpAntTask "org.apache.ant:ant-commons-net:1.10.7"
    
}

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))
def downloads_pwd = System.getProperty('downloads_pwd',properties.get('downloads_pwd','downloads_pwd'))
def downloads_usr = System.getProperty('downloads_usr',properties.get('downloads_usr','downloads_usr'))
def python= System.getProperty('python',properties.get('python','python'))
def rst2html= System.getProperty('rst2html',properties.get('rst2html','rst2html'))

def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sourceSets {
    main {
    	output.dir(generatedResources, builtBy: 'generateMyResources')
    }
}

task generateMyResources {
	def versionPropsFile = new File(generatedResources,"ch/ehi/ilimanager/Version.properties")
	def version="$project.version"
	def hash=getGitHash()
	inputs.property("version","$project.version")
	inputs.property("hash",getGitHash())
	outputs.file versionPropsFile
	doLast {
		def versionProps = new Properties()
		versionProps.setProperty('version', version)
		versionProps.setProperty('versionCommit', hash)
		versionPropsFile.getParentFile().mkdirs();
		versionProps.store(versionPropsFile.newWriter(), null);
	}
}

task usrdoc(type:Exec) {
	group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = 'Builds the user documentation (html)'
	def infile=new File(project.projectDir,'docs/ilimanager.rst')
	def outfile=new File(project.buildDir,'docs/ilimanager.html')
	inputs.file infile
	outputs.file outfile
	doFirst{
		new File(project.buildDir,'docs').mkdir()
	}
		workingDir = project.buildDir
		executable python
		args = [rst2html, infile, outfile]
}

task bindist(type: Zip){
	baseName = project.name
	destinationDir = file('dist')
	from jar
	into('docs'){
		from files("LICENSE","README.md","docs/CHANGELOG.txt",new File(project.buildDir,'docs/ilimanager.html'))
	}
	into('libs'){
		from configurations.runtimeClasspath
		//def jars=[]
		//subprojects.each {
        //	jars+=it.libsDir
        //}
        //from jars
	}
	// version = '1.0.6'
}

jar {
  manifest {
    attributes(
      "Main-Class": "ch.ehi.ilimanager.Main",
      "Class-Path": configurations.runtimeClasspath.collect { 'libs/'+it.getName() }.join(' '))
  }
}

artifacts {
	archives(bindist.archivePath) {
        type 'zip'
        classifier 'bindist'
        builtBy bindist
    }
    archives(jar.archivePath){
    	builtBy jar
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
        	configuration = configurations.deployerJars
			repository(url: 'ftp://ftp.interlis.ch'){
            	authentication(userName: repos_usr, password: repos_pwd)
            }
        }
    }
}

task uploadBin(dependsOn: bindist) {
	doLast {
		ant.taskdef(name: 'ftp',
					classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
					classpath: configurations.ftpAntTask.asPath)
		def dist= bindist.archiveFile.get().asFile.parent
		def name=bindist.archiveFile.get().asFile.name
		def json = groovy.json.JsonOutput.toJson([filename: 'https://downloads.interlis.ch/ilimanager/'+name, version: project.version ,date: new Date().format( 'yyyy-MM-dd' )])
		def releaseFile = new File(dist,project.name+"-release.json")
		releaseFile.write(json)
		ant.ftp(server: "jql.ftp.infomaniak.com", userid: downloads_usr, password: downloads_pwd, 
			remoteDir: "/ilimanager", passive:"yes") {
				fileset(dir: dist ) {
					include(name: name)
					include(name: releaseFile.name)
				}
		}
	}
}